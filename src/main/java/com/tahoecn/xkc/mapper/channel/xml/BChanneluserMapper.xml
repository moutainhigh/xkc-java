<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tahoecn.xkc.mapper.channel.BChanneluserMapper">

    <select id="AgenApproverList" resultType="hashmap">
        <![CDATA[
select * from (
select bc.Approver ID,sa.[EmployeeName] Name from B_ChannelUser bc
left join [dbo].[S_Account] sa on bc.Approver=sa.id
where sa.IsDel=0 and sa.[Status]=1 and bc.Approver is not null and bc.Approver<>''
group by bc.Approver,sa.EmployeeName
UNION
SELECT bc1.ID,bc1.Name FROM dbo.B_ChannelUser bc
INNER JOIN dbo.B_ChannelUser bc1 ON bc.Approver=bc1.ID AND bc1.Status=1 AND bc1.IsDel=0 AND bc1.Job=0
WHERE bc.IsDel=0 AND bc.Status=1 AND bc.Approver IS NOT NULL AND bc.Approver<>''
) u where u.name is not null and u.name<>''
    ]]>
    </select>

    <insert id="ChannelDetail_InsertN" parameterType="com.tahoecn.xkc.model.dto.ChannelInsertDto">
        INSERT INTO [dbo].[B_ChannelUser] (
        ID,
        UserName,
        ChannelTypeID,
        ChannelType,
        [Password],
        Mobile,
        Name,
        ChannelOrgCode,
        ChannelOrgID,
        Job,
        ApprovalStatus,
        Approver,
        ApprovalDate,
        Creator,
        CreateTime,
        IsDel,
        Status
        )
        VALUES
        (
        #{LeaderID},
        #{UserName},
        '32C92DA0-DA13-4C21-A55E-A1D16955882C',
        '中介同行',
        UPPER (
        SUBSTRING ( sys.fn_sqlvarbasetostr ( HashBytes ( 'MD5', '123321' )), 3, 32 )),
        #{Mobile},
        #{Name},
        #{OrgCode},
        #{OrgID},
        0,
        1,
        #{UserID},
        getdate(),
        #{UserID},
        getdate(),
        0,
        #{Status}
        )
    </insert>

    <update id="ChannelStatus_UpdateN">
        UPDATE [dbo].[B_ChannelUser] SET [Status]=#{Status},Editor=#{UserID},EditeTime=getdate()
        WHERE ChannelOrgID=#{ID} AND Job=0
    </update>

    <select id="ChannelAgenUserNameIsExist_SelectN" resultType="integer" parameterType="string">
        <![CDATA[  select count(1) ct from B_ChannelUser where UserName=#{UserName} and IsDel=0 ${sqlWhere} ]]>
    </select>

    <select id="ChannelAgenMobileIsExist_SelectN" resultType="integer" parameterType="string">
       <![CDATA[ select count(1) ct from B_ChannelUser where Mobile=#{Mobile} and IsDel=0 ${sqlWhere} ]]>
    </select>

    <select id="ChannelUserCurrency_Find" resultType="java.util.HashMap" parameterType="string">
        SELECT *,dbo.F_DictName(ChannelTypeID) 'ChannelType'
        FROM B_ChannelUser where ( UserName=#{Mobile})
        and IsDel=0 and Status=1
    </select>

    <select id="BrokerMyCenter_Select" resultType="java.util.HashMap" parameterType="string">
        <![CDATA[
        select
        case when LJAmount is null then 0 else cast(LJAmount as decimal(15,2)) end as LJAmount
        ,
        case when YJAmount is null then 0 else cast(YJAmount as decimal(15,2)) end as YJAmount
        ,
        case when DJAmount is null then 0 else cast(DJAmount as decimal(15,2)) end as DJAmount
        ,
        case when BBCount is null then 0 else cast(BBCount as decimal(15,2)) end as BBCount
        ,
        case when DFCount is null then 0 else cast(DFCount as decimal(15,2)) end as DFCount
        ,
        case when RGCount is null then 0 else cast(RGCount as decimal(15,2)) end as RGCount
        ,
        case when QYCount is null then 0 else cast(QYCount as decimal(15,2)) end as QYCount
        ,(select count(*) from S_Message where Receiver = #{BrokerID} and IsRead<>1) as NoReadMesCnt
        from (select id as BrokerID from B_ChannelUser
        where id=#{BrokerID}) t
        left join
        (
        select BrokerID,sum(BBCount) as BBCount from (select ReportUserID as BrokerID,count(a.id) as BBCount from B_Clue a left join B_Opportunity b on a.id  = b.clueid
        group by ReportUserID,a.Status,b.ID,b.Status
        having a.Status in(1,2) and b.ID is null or (b.id is not null and b.Status=1)) p
        group by BrokerID
        ) a on t.BrokerID = a.BrokerID

        left join
        (select BrokerID, sum(CommissionAmount) as YJAmount from A_CommissionRecords
        group by BrokerID,Status
        having Status=3) b
        on t.BrokerID = b.BrokerID
        left join
        (select BrokerID, sum(CommissionAmount) as DJAmount from A_CommissionRecords
        group by BrokerID,Status
        having Status=2) c
        on t.BrokerID = c.BrokerID
        left join
        (select BrokerID,sum(CommissionAmount) as LJAmount from A_CommissionRecords
        group by BrokerID ) d on t.BrokerID = d.BrokerID
        left join
        (
        select a.ReportUserID as BrokerID,count(a.id) as DFCount from B_Clue a inner join B_Opportunity b on a.id  = b.clueid
        group by a.ReportUserID,b.Status
        having (b.Status=2  or b.Status=3)
        ) e on t.BrokerID = e.BrokerID
        left join
        (
        select BrokerID,sum(RGCount) as RGCount from (select a.ReportUserID as BrokerID,count(a.id) as RGCount from B_Clue a inner join B_Opportunity b on a.id  = b.clueid
        group by a.ReportUserID,b.Status
        having  b.Status=4) aa
        group by BrokerID
        ) f on t.BrokerID = f.BrokerID
        left join
        (
        select a.ReportUserID as BrokerID,count(a.id) as QYCount from B_Clue a inner join B_Opportunity b on a.id  = b.clueid
        group by a.ReportUserID,b.Status
        having b.Status=5
        ) g on t.BrokerID = g.BrokerID
        ]]>
    </select>

    <update id="mBrokerChannelUserCardDetail_Update" >
        UPDATE B_ChannelUser
        SET CertificatesName = #{CertificatesName},
        CertificatesType =#{CertificatesType},
        CertificatesNo = #{CertificatesNo},
        CertificatesPicFace = #{CertificatesPicFace},
        CertificatesPicBack = #{CertificatesPicBack}
        WHERE
        ID = #{UserID};
    </update>

    <update id="mBrokerChannelUserBankCardDetail_Update" >
        UPDATE B_ChannelUser
        SET BankCardPerson = #{BankCardPerson},
        BankCardCreate = #{BankCardCreate},
        BankCard = #{BankCard},
        BankCardProvince = #{BankCardProvince},
        BankCardCity = #{BankCardCity},
        BankCardArea = #{BankCardArea},
        BankCardBranch = #{BankCardBranch},
        BankCardPic = #{BankCardPic}
        WHERE
        ID = #{UserID};
    </update>

    <select id="mBrokerChannelUserDetail_Select" resultType="java.util.HashMap" parameterType="string">
        <![CDATA[
    SELECT ID,Name,Mobile,dbo.F_DictName(Gender) 'Gender',Gender 'GenderID',dbo.F_DictName(ChannelTypeID) as 'ChannelType',ChannelTypeID,Password,CertificatesName,dbo.F_DictName(CertificatesType) as 'CertificatesTypeName',CertificatesType,
CertificatesNo,CertificatesPicFace,CertificatesPicBack,BankCardPerson,BankCard,BankCardCreate,HeadImg,
dbo.F_CityName(BankCardProvince) as 'BankCardProvinceName',BankCardProvince,dbo.F_CityName(BankCardCity) as 'BankCardCityName',BankCardCity,dbo.F_CityName(BankCardArea) as 'BankCardAreaName',BankCardArea,BankCardBranch,BankCardPic
FROM B_ChannelUser WHERE ID=#{UserID};
    ]]>
    </select>

    <update id="mBrokerChannelUserDetail_Upate">
        UPDATE B_ChannelUser SET Name=#{Name},Gender=#{Gender},Mobile=#{Mobile},ChannelTypeID=#{ChannelTypeID}
        WHERE ID=#{UserID};
    </update>

    <select id="ChannelUser_Find" resultType="java.util.HashMap" parameterType="string">
        SELECT
        *,
        dbo.F_DictName ( ChannelTypeID ) 'ChannelType'
        FROM
        B_ChannelUser
        WHERE
        ( UserName = #{Mobile} )
        AND PASSWORD = upper( substring( sys.fn_sqlvarbasetostr ( HashBytes ( 'MD5', #{Password} ) ), 3, 32 ) )
        AND IsDel = 0
        AND ChannelTypeID IN ( '32C92DA0-DA13-4C21-A55E-A1D16955882C', '46830C26-0E01-4041-8054-3865CCDD26AD', '725FA5F6-EC92-4DC6-8D47-A8E74B7829AD', 'EB4AD331-F4AD-46D6-889A-D45575ECEE66' )
    </select>
    
    <select id="ChannelUser_Detail_FindById" parameterType="java.util.Map" resultType="java.util.Map">
		<![CDATA[
	    SELECT 	'1' as ProjectID, OrgCode,pid ,OrgName, [B_ChannelUser].* 
	    FROM 	[B_ChannelUser]
				left join B_ChannelOrg on [B_ChannelUser].ChannelOrgID=B_ChannelOrg.id
		where 	[B_ChannelUser].id=#{ID}  order by  createtime  desc
		
	    ]]>
	</select>
	
	<!-- 修改密码-判断原密码是否正确 -->
	<select id="ChannelUserPassWord_Select" parameterType="java.util.Map" resultType="com.tahoecn.xkc.model.channel.BChanneluser">
		<![CDATA[
		    SELECT * FROM B_ChannelUser 
		    WHERE ID=#{UserID} and Password = #{OldPassword}
	    ]]>
	</select>
	<!-- 修改密码 -->
	<update id="ChannelUserPassWord_Update" parameterType="java.util.Map">
		<![CDATA[
		    UPDATE B_ChannelUser SET Password = #{Password} 
    		WHERE ID=#{UserID} and Password = #{OldPassword}
	    ]]>
	</update>
	
	<!-- 删除兼职成员 -->
	<delete id="mChannelTempPerson_Delete" parameterType="java.util.Map" >
		<![CDATA[
		    UPDATE B_ChannelTask_ChannelUser
			SET IsDel=1,Status = 3
			WHERE ChannelUserID=#{ChannelUserID} AND  ChannelTaskID IN (
				SELECT ID FROM dbo.B_ChannelTask WHERE Creator=#{UserID}
			)
	    ]]>
	</delete>
</mapper>
